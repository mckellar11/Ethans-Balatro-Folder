[manifest]
version = "1.0.0"
dump_lua = true
priority = 1


# Create Spell Area 
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = '''G.SPLASH_BACK = Sprite(-30, -6, G.ROOM.T.w+60, G.ROOM.T.h+12, G.ASSET_ATLAS["ui_1"], {x = 2, y = 0})'''
position = "before"
payload = '''
if USING_BETMMA_SPELLS then -- not adding area if Betmma_Spells.lua isn't executed
    self.ABILITY_W=0.8
    self.ABILITY_H=0.8
    self.betmma_spells = CardArea(G.jokers.T.x + G.jokers.T.w + 0.2+1.1*G.CARD_W, G.jokers.T.y+2.6*G.CARD_H, 1.2*G.CARD_W, 0.3*G.CARD_H, {
            card_limit = 3,
            type = "betmma_ability",
            highlight_limit = 2
    })
    self.betmma_spells.card_w=self.betmma_spells.card_w*34/71
end
'''
match_indent = true

# Let Spells go to Spell Area when bought from shop
[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = "G.consumeables:emplace(c1)"
position = "at"
payload = '''
if c1.ability.set=='Spell' and G.betmma_spells then -- betmma_spells
    G.betmma_spells:emplace(c1)
else
    G.consumeables:emplace(c1)
end
'''
match_indent = true

# Prevent using Spells costs pack card 
[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = "elseif G.GAME.pack_choices and G.GAME.pack_choices > 1 then"
position = "before"
payload = '''
elseif card.ability.set=='Spell' and G.TEMP_FLAG_TO_LET_BELOW_PATCH_READ then -- betmma_spells
    G.TEMP_FLAG_TO_LET_BELOW_PATCH_READ=nil
    G.booster_pack.alignment.offset.y = G.booster_pack.alignment.offset.py
    G.booster_pack.alignment.offset.py = nil
'''
match_indent = true

# Prevent dissolve when using Spells in pack. Also emplace Spell card when bought from pack
[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = "if G.STATE == G.STATES.TAROT_PACK or G.STATE == G.STATES.PLANET_PACK or G.STATE == G.STATES.SPECTRAL_PACK*"
position = "after"
payload = '''
if card.ability.set=='Spell' and area==G.pack_cards then -- betmma_spells
    area:remove_from_highlighted(card)
    play_sound('cardSlide2', nil, 0.3)
    dont_dissolve = true
    area:remove_card(card)
    G.betmma_spells:emplace(card)
else
    G.TEMP_FLAG_TO_LET_BELOW_PATCH_READ=1
end
'''
match_indent = true

# Call calculate_joker on spells for individual card played (better calc version)
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''-- TARGET: main scoring on played cards'''
position = "after"
payload = '''
if USING_BETMMA_SPELLS and G.betmma_spells then
    local effects={}
    for k=1, #G.betmma_spells.cards do
        --calculate the spell individual card effects
        local eval = G.betmma_spells.cards[k]:calculate_joker({cardarea = G.play, full_hand = G.play.cards, scoring_hand = context.scoring_hand, scoring_name = context.text, poker_hands = context.poker_hands, other_card = card, individual = true, no_retrigger_anim = true})
        if eval then 
            table.insert(effects, {jokers=eval})
        end 
    end
    
    SMODS.trigger_effects(effects,card)
end
'''
match_indent = true

# add perma_mult and perma_p_dollars to card.ability (this hasn't been added by smod?)
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "perma_bonus = self.ability and self.ability.perma_bonus or 0,"
position = "before"
payload = '''
perma_mult = self.ability and self.ability.perma_mult or 0,
perma_p_dollars = self.ability and self.ability.perma_p_dollars or 0,
'''
match_indent = true

# display perma_mult in generate_card_ui (localthunk moment)
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "elseif _c.set == 'Enhanced' then"
position = "before"
payload = '''
    if card and card.ability.perma_mult then
        if TalismanCompat(card.ability.perma_mult)>TalismanCompat(0) then
            localize{type = 'other', key = 'card_extra_mult', nodes = desc_nodes, vars = {card.ability.perma_mult}}
        elseif TalismanCompat(card.ability.perma_mult)<TalismanCompat(0) then
            localize{type = 'other', key = 'card_extra_mult_neg', nodes = desc_nodes, vars = {card.ability.perma_mult}}
        end
    end
    if card and card.ability.perma_p_dollars then
        if TalismanCompat(card.ability.perma_p_dollars)>TalismanCompat(0) then
            localize{type = 'other', key = 'card_extra_p_dollars', nodes = desc_nodes, vars = {card.ability.perma_p_dollars}}
        elseif TalismanCompat(card.ability.perma_p_dollars)<TalismanCompat(0) then
            localize{type = 'other', key = 'card_extra_p_dollars_neg', nodes = desc_nodes, vars = {card.ability.perma_p_dollars}}
        end
    end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "elseif _c.set == 'Booster' then"
position = "before"
payload = '''
    if card and card.ability.perma_mult then
        if TalismanCompat(card.ability.perma_mult)>TalismanCompat(0) then
            localize{type = 'other', key = 'card_extra_mult', nodes = desc_nodes, vars = {card.ability.perma_mult}}
        elseif TalismanCompat(card.ability.perma_mult)<TalismanCompat(0) then
            localize{type = 'other', key = 'card_extra_mult_neg', nodes = desc_nodes, vars = {card.ability.perma_mult}}
        end
    end
    if card and card.ability.perma_p_dollars then
        if TalismanCompat(card.ability.perma_p_dollars)>TalismanCompat(0) then
            localize{type = 'other', key = 'card_extra_p_dollars', nodes = desc_nodes, vars = {card.ability.perma_p_dollars}}
        elseif TalismanCompat(card.ability.perma_p_dollars)<TalismanCompat(0) then
            localize{type = 'other', key = 'card_extra_p_dollars_neg', nodes = desc_nodes, vars = {card.ability.perma_p_dollars}}
        end
    end
'''
match_indent = true